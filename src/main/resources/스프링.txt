1. 프레임워크란?
  라이브러리: 반복되는 코드들을 모아놓은 것 
  - 만들어진 코드를 기반으로 개발을 할 수 있어서 생산성이 증가한다. 
  - 개발자가 능동적으로 호출할 수 있다.
  
  프레임워크: 반복되는 코드들을 어떤 규칙에 맞게 쓸 수 있도록 환경을 구성해 놓은 것 
  
  차이점 : 개발자가 작성한 코드가 프레임워크에 의해 사용 방법을 강제한다.

2. 스프링 프레임워크란?

3. 스프링 프레임워크 핵심 모듈 5가지 및 설명
- 코어 컨테이너
- Web
- DI
- AOP(관점 지향 프로그래밍)
- DATA

4. 의존관계 확인
  - 의존하는 부분을 외부에서 주입하는것 (DI)
  - 무엇에 의존하고 무엇을 밖에서 주입하는지

5. 관점 지향 프로그래밍(Aspect Oriented Programming)
  - 중심적 관심사(Primary concern) : 실현해야 할 기능을 나타내는 프로그램
  - 횡단적 관심사(Crosscutting - Concern) : 핵심기능은 아니지만 품질이나 유지보수 관점에서 필요한 기능을 나타내는 프로그램

6. DI컨테이너, 스프링 컨테이너 -> DI의 실현을 돕는 프레임워크

  DI - 1) 클래스 의존
        2) 인터페이스 의존
	- 인터페이스의 참조를 받는 유형으로 사용하며, 변수의 이름을 변경하지 않아도 된다.
	- 인터페이스가 선언된 메서드를 이용하면 클래스가 바뀌어도 메서드명을 변경하지 않아도 된다.
  의존하는 부분을 외부에서 주입하는것
  의존하는 부분 : 사용하는 객체 클래스에 사용되는 객체 클래스가 작성된 상태
  외부에서 주입 : 사용하는 객체를 클래스 밖에서 사용되는 객체 인스턴스를 주입하는 것
		-> DI컨테이너에서 인스턴스를 생성해서 의존하는 부분에 주입한다.

  DI컨테이너 인스턴스 생성을 맡길 때 지켜야할 규칙 5가지 단계
  1. 인터페이스를 이용하여 의존성을 만든다. -> 의존하는 부분에 인터페이스를 이용한다.
  2. 인스턴스를 명시적으로 생성하지 않는다. -> 인스턴스 생성에 new 키워드를 사용하지 않는다.
  3. 어노테이션을 클래스에 부여한다.
  4. 스프링 프레임워크에서 인스턴스를 생성한다. 
     -> 인스턴스를 생성하려면 클래스에 인스턴스 생성 어노테이션(@)을 부여해주어야 한다.
	@Repository @Service @Bean @Componet

     컴포넌트 스캔을 한 후 DI는 인스턴스 생성 어노테이션이 부여된 클래스 추출

     (인스턴스 생성 어노테이션)
     @Controller : 인스턴스 생성 시 스프링MVC 이용 시 컨트롤러 부여
     @Service : 인스턴스 생성 시 트랜잭션 경계가 되는 도메인(서비스)기능에 부여
     @Repository: 인스턴스 생성 시 데이터베이스 엑세스(리포지토리)기능에 부여
     @Componet : 인스턴스 생성 시 위의 용도 이외의 클래스 부여

  5. 인스턴스를 이용하고 싶은 곳에 어노테이션을 부여한다.
     @Autowired : 생성된 인스턴스를 이용하는 클래스에 참조를 받는 필드를 선언하고 필드위에 부여한다.

  6. @Autowired를 필드 인젝션, setter() 인젝션
     스프링3 이후부터는 생성자 주입방식 권장.
	- 주입 받아야 할 객체의 변수를 final로 작성한다.
	- 생성자를 이용해서 해당 변수를 생성자의 파라미터로 지정

  7. 인터페이스를 이용한 느슨한 결합이란 나중에 다른 클래스의 객체로 쉽게 변경할 수 있도록 하는 것

  8.@Primary : 주입해야 할 Bean이 1개 이상일 때 우선순위를 정해주는 어노테이션

  9.@Qualifier : Bean의 이름을 지정하여 특정한 이름의 객체를 주입하는 방식

  10. 스프링 빈(Bean)으로 등록되는 객체들은 "핵심배역"을 담당하는 객체이다.
       핵심배역 : 오랜 시간동안 프로그램 내에서 상주하면서 중요한 역할.(비즈니스 로직을 처리하는 Bean들)
		- 데이터의 중심을 두고 설계된 객체며 
		- 특히 DTO는 생명주기가 짧고 데이터 보관이 주요 역할이므로 Bean으로 처리하지 않는다.
       - xml, 어노테이션으로 처리하는 객체의 구분 기준
	판단 기준 : 코드 수정 가능?
	ex) jar 파일로 추가되는 클래스의 객체를 스프링의 빈으로 처리해야 하는 경우 
	-> XML의 <Bean>로 처리하고 직접 작성하는 클래스는 어노테이션을 사용하는 것을 권장한다.

  11. ApplicationContext가 웹 어플리케이션에서 동작하려면 웹 어플리케이션이 실행될 때 
      스프링을 로딩해서 해당 웹 어플리케이션 내부에 스프링의 ApplicationContext를 생성하는 작업이 필요하다.

  12. 스프링프레임워크는 웹과 관련된 작업은 "spring-webmvc"라이브러리가 담당하므로 build.gradle에 해당 라이브러리 추가

  13. WEB-INF/ 폴더 아래에 web.xml(웹 어플리케이션의 배치관리자 DeployDescriptor) <listener>설정과 listener에 필요한 <context-param> 추가

  14. DataSource 구성
       Tomcat과 스프링이 연동되는 구조를 완성(13)한 후
       웹 어플리케이션의 필수 기능인 데이터베이스 관련 설정을 해야한다.

 + main.java -> Bean들의 영역이다.(서비스, 다오)
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

웹 프로젝트의 기본구조

- 브라우저(클라이언트 프로그램)
  1) 서버에서 전송한 결과를 화면에 보여준다.(렌더링)
  2) 사용자의 화면 조작을 이용해서 서버에 원하는 데이터를 보낸다.(request)
  3) 서버에서 데이터를 받는다.(response)

- 웹서버, 웹컨테이너(웹서버 + 웹컨테이너 -> Tomcat Web Application Server)
  이미지와 같은 고정된 데이터 제공(웹서버)
  동적으로 매번 새로운 데이터를 만들어낼 수 있는 기능(WAS)

  관련기술 : Servlet, JSP, 각종 프레임워크와 언어들

- 데이터베이스(DBMS -> Mysql)
  영구적으로 데이터를 보관하고 운영하기 위한 프로그램

  관련기술 : sql, db설계 및 구현